https://blog.csdn.net/hacker00011000/article/details/72667731
todo: cdn akamai


对象存储将获取的每个数据片段指定为对象。数据保存在单独的存储库中，而不是以文件的形式保存在文件夹中，数据与关联的元数据和唯一标识符捆绑在一起，以形成存储池。
对象存储，也称为基于对象的存储，是一种扁平结构，其中的文件被拆分成多个部分并散布在多个硬件间。在对象存储中，数据会被分解为称为"对象"的离散单元，并保存在单个存储库中，而不是作为文件夹中的文件或服务器上的块来保存。
对象存储卷会作为模块化单元来工作：每个卷都是一个自包含式存储库，均含有数据、允许在分布式系统上找到对象的唯一标识符以及描述数据的元数据。元数据很重要，其包括年龄、隐私/安全信息和访问突发事件等详细信息。对象存储元数据也可以非常详细，并且能够存储与视频拍摄地点、所用相机和各个帧中特写的演员有关的信息。为了检索数据，存储操作系统会使用元数据和标识符，这样可以更好地分配负载，并允许管理员应用策略来执行更强大的搜索。
对象存储需要一个简单的 HTTP 应用编程接口（API），以供大多数客户端（各种语言）使用。对象存储经济高效：您只需为已用的内容付费。它可以轻松扩展，因而是公共云存储的理想之选。它是一个非常适用于静态数据的存储系统，其灵活性和扁平性意味着它可以通过扩展来存储极大量的数据。对象具有足够的信息供应用快速查找数据，并且擅长存储非结构化数据。
当然，它也存在缺点。无法修改对象——您必须一次性完整地写入对象。对象存储也不能很好地与传统数据库搭配使用，因为编写对象是一个缓慢的过程，编写应用以使用对象存储 API 并不像使用文件存储那么简单。



文件存储将数据作为一条信息存储在文件夹中，以便于区分其他数据进行组织。这也称为分层存储，模仿了纸质文件的存储方式。当您需要访问数据时，您的计算机系统需要知道数据的路径。
文件存储也称为文件级存储或基于文件的存储，且正如您所想：数据会以单条信息的形式存储在文件夹中，正如您将几张纸放入一个马尼拉文件夹中一样。当您需要访问该数据时，您的计算机需要知道相应的查找路径。（注意，这可能会是一条冗长的路径。）存储在文件中的数据会根据数量有限的元数据来进行整理和检索，这些元数据会告诉计算机文件所在的确切位置。它就像是数据文件的库卡目录。
问题是，就像文件柜一样，虚拟抽屉只能打开到一定的程度。基于文件的存储系统必须通过添置更多系统来进行横向扩展，而不是通过增添更多容量来进行纵向扩展。



块存储会将数据拆分成块，并单独存储各个块。每个数据块都有一个唯一标识符，所以存储系统能将较小的数据存放在最方便的位置。这意味着有些数据可以存储在 Linux® 环境中，有些则可以存储在 Windows 单元中。
块存储通常会被配置为将数据与用户环境分离，并会将数据分布到可以更好地提供数据的多个环境中。然后，当用户请求数据时，底层存储软件会重新组装来自这些环境的数据块，并将它们呈现给用户。它通常会部署在存储区域网络（SAN）环境中，而且必须绑定到正常运行的服务器。
由于块存储不依赖于单条数据路径（和文件存储一样），因此可以实现快速检索。每个块都独立存在，且可进行分区，因此可以通过不同的操作系统进行访问，这使得用户可以完全自由地配置数据。它是一种高效可靠的数据存储方式，且易于使用和管理。它适用于要执行大型事务的企业和部署了大型数据库的企业。这意味着，需要存储的数据越多，就越适合使用块存储。
但是，块存储有一些缺点。块存储的成本高昂。它处理元数据的能力有限；这意味着，它需要在应用或数据库级别进行处理——开发人员或系统管理员又多了一件事要担忧。



NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。
如果你的家庭中只有一台电脑，所有的家庭资料都存在这台pc上，你女儿想要看她存在电脑里的泰国毕业旅行的照片，你老婆想要看存在电脑里还没看完的美剧，你想要处理你存在电脑中的公文，你妈又想看孙女小时候的照片，而恰巧这些需求又同时发生了，是不是就很难办了呢？如果你有一台NAS，你的资料都存储在NAS里，这些问题就迎刃而解了。你女儿可以用IPAD连接NAS，查看她的毕业旅行照片，你老婆可以用电视的DLNA功能直接播放存储在NAS里的美剧，你继续用电脑处理你的公文，你妈直接用手机连接NAS就能看你孙女小时候的照片！关键是，这一切都可以同时进行！不需要任何的数据拷贝！只要所有的设备都处在你加的局域网里就可以了，一切就是这么方便。



terabyte
英 [ˈterəbaɪt]  美 [ˈterəbaɪt]
1000GB == 1TB

petabyte
英 [ˈpetəbaɪt]
1000TB == 1PB

billion
num. 十亿

leverage
英 [ˈliːvərɪdʒ]  美 [ˈlevərɪdʒ]
n. 影响力，手段；杠杆力，杠杆作用；<美>杠杆比率
v. <英>举债经营；充分利用（资源、观点等）

incur
英 [ɪnˈkɜː(r)]  美 [ɪnˈkɜːr]
v. 带来（成本、花费等）；招致，遭受

conserve
英 [kənˈsɜːv]  美 [kənˈsɜːrv]
v. 保护，保存；节省，节约；使（量，如能量、质量）守恒；将……制成蜜饯
n. 蜜饯，果脯

while
英 [waɪl]  美 [waɪl]
conj. 当……的时候；与……同时；而，然而（表示对比）；尽管，虽然；直到……为止

While insignificant on a small scale, multiplied over billions of photos and petabytes of data, accessing metadata is the throughput bottleneck.
文件规模较小时这些花费无关紧要，然而面对几百billion的图片和PB级别的数据，访问元数据就是吞吐量瓶颈所在


diminish
英 [dɪˈmɪnɪʃ]  美 [dɪˈmɪnɪʃ]
v. 减弱，降低，减少；贬低，轻视

diminishing return
收益递减；报酬减少

overstate
英 [ˌəʊvəˈsteɪt]  美 [ˌoʊvərˈsteɪt]
v. 夸大，对……言过其实

elide
英 [ɪˈlaɪd]  美 [ɪˈlaɪd]
vt. 省略；取消；删去；不予考虑删节
n. （Elide）人名；（意）埃利德

markup
英 [ˈmɑːkʌp]  美 [ˈmɑːrkʌp]
n. 涨价；利润；（计）标记符号
n. （Markup）人名；（捷、匈）马尔库普











insight
英 [ˈɪnsaɪt]  美 [ˈɪnsaɪt]
n. 洞悉，了解；洞察力
【名】 （Insight）（英）因赛特（人名）

gain insight into
深入了解



The storage system ends up processing the long tail of requests for less popular photos, which are not available in the CDN and are thus likely to miss in our caches.
end up
1. PHRASAL VERB If someone or something ends up somewhere, they eventually arrive there, usually by accident.
最后来到
2. PHRASAL VERB If you end up doing something or end up in a particular state, you do that thing or get into that state even though you did not originally intend to.
到头来


shoulder
英 [ˈʃəʊldə(r)]  美 [ˈʃoʊldər]
n. 肩山肩，瓶肩；<美> （公路旁的）路肩，紧急停车道；（担负责任或艰难困苦或提供力量的）肩膀
v. 承担，担负；挤，闯；（用肩膀）推开，顶开；肩扛，肩挑

insulation
英 [ˌɪnsjuˈleɪʃ(ə)n]  美 [ˌɪnsəˈleɪʃn]
n. 隔热，绝缘，隔音；隔热（或绝缘、隔音）材料；隔绝状态


in the near future
英  美
在不久的将来




canonical
英 [kəˈnɒnɪkl]  美 [kəˈnɑːnɪkl]
adj. 根据教规的，按照宗教法规的；真经的，正经的；标准的，典范的；准确的，权威的；公认的，依据科学法则的；（数学表达式）最简洁的；（与）公理（或标准公式）（有关）的；（与）教会（或教士）（有关）的


supplemental
英 [ˌsʌplɪˈmentəl]  美 [ˌsʌpləˈmentl]
adj. 补充的（等于 supplementary）；追加的

ease
英 [iːz]  美 [iːz]
n. 容易；舒适，自在
v. 减轻，缓和，放松；缓缓移动；使容易；降低；使离职；熟悉

proactive
英 [ˌprəʊˈæktɪv]  美 [ˌproʊˈæktɪv]
adj. 积极主动的，主动出击的；前摄的（前一活动中的因素对后一活动造成影响的）


dub
英 [dʌb]  美 [dʌb]
v. 把……称为，给……起绰号；配音；封……为爵士；
dubbed
英 [dʌbd]  美 [dʌbd]
adj. 被称为的；译制的
v. 刺；授予……称号；译制影片；结账（dub 的过去分词）

pitch fork
集草叉，草叉(叉子, 用来叉一把草装起来的那种)


heavy-handed
英 [ˌhevi ˈhændɪd]  美 [ˌhevi ˈhændɪd]
adj. 严厉的；笨手笨脚的；手辣的

albeit
英 [ˌɔːlˈbiːɪt]  美 [ˌɔːlˈbiːɪt]
conj. 虽然，尽管




reclaim
英 [rɪˈkleɪm]  美 [rɪˈkleɪm]
v. 要求归还；利用，改造（荒地）；回收（废品中有用的东西）；感化，使纠正
n. 归还要求（或主张）



take after
与……相像
“The Design and Implementation of a Log-Structured File System“ 是 Mendel Rosenblum 和 John K. Ousterhout 在90年代初发表的一篇经典论文。且不提论文的两个作者都大名鼎鼎：Rosenblum 是 Vmware 的联合创始人，Ousterhout 是 Raft的作者之一（Ongaro 的老板）; 这篇论文在发表之后就引起了长达数年的 Fast File System 和 LFS 之间的口水战。LFS 在提出后的前10多年里并没有被业界采用（猜猜为什么），但当 SSD 的价格下降并成为主流后，LFS 却焕发了第二春：LFS 被广泛运用在 SSD 的 firmware 中，而且新的文件系统，譬如基于 journal 的 ext3/ext4和支持 copy on write 的 btrfs都吸取了LFS 的 idea；甚至我们常用的LSM算法都能看到 LFS 的影子。
https://zhuanlan.zhihu.com/p/41358013















thread
英 [θred]  美 [θred]
n. 线；细线，线状物；思路，贯穿的主线；
（互联网留言板上的）同主题帖子，系列相关帖子；少量，较低水平；螺纹

obviate
英 [ˈɒbvieɪt]  美 [ˈɑːbvieɪt]
vt. 排除；避免；消除

footprint
英 [ˈfʊtprɪnt]  美 [ˈfʊtprɪnt]
n. 脚印，足迹；占用空间；覆盖区
Store machines reduce their main memory footprints by 20% through these two techniques.




TFS（Taobao File System）是一个高可扩展、高可用、高性能、面向互联网服务的分布式文件系统， [1]  主要针对海量的非结构化数据，它构筑在普通的Linux机器集群上，可为外部提供高可靠和高并发的存储访问。TFS为淘宝提供海量小文件存储，通常文件大小不超过1M，满足了淘宝对小文件存储的需求，被广泛地应用在淘宝各项应用中。它采用了HA架构和平滑扩容，保证了整个文件系统的可用性和扩展性。同时扁平化的数据组织结构，可将文件名映射到文件的物理地址，简化了文件的访问流程，一定程度上为TFS提供了良好的读写性能。




