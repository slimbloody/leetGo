===================================
4.2: Broadcast ordering
===================================


so the broadcast protocols generalize the type of network communication that we can do in a distributed system.
======================
Broadcast protocols
======================
Broadcast (multicast) is group communication:
    1. One node sends message, all nodes in group deliver it
    2. Set of group members may be fixed (static) or dynamic
    3. If one node is faulty, remaining group members carry on(fault tolerance)
    4. Note: concept is more general than IP multicast (we build upon point-to-point messaging)
1.
next, we are going to look at broadcast protocols, this might seem like a bit of a sudden jump from logical time, but actually as we will see in a moment there's a strong connection between the two.
so far we've been considering point-to-point communication where one sender sends a message to one recipient over the network, the message may or may not arrive, but it's still one-to-one communication between two nodes.
2.
in broadcast or multicast communication, we generalize this to a group of nodes, so that one node may send a message to all of the nodes in the group at the same time.
nwo for the purpose fo this course, we're mostly going to assume that the set of nodes in the group is fixed and known in advance, but in general, you may have a system in which nodes can join and leave, or be added or removed by an administrator. that is something that real protocols need to deal with.
3.
so one particular thing that we want of a broadcast protocol is fault tolerance, and this means that say one of the nodes in the group is faulty, all of the remaining nodes should still be able to continue broadcasting an delivering messages as before, so we don't want a single faulty node to grind to a halt.

4.
 there are a couple of different implementations of broadcast or multicast, one that you might have come across in the context of computer networking, is that some local area networks support broadcast or multicast at hardware level. this is quite useful on local area networks, generally, that kind of multicast does not work over the public internet. so what we will consider in this course is more general form of multicast or broadcast, where we assume that the underlying network only provides point-to-point messaging as in uni-cast, and we are going to build broadcast protocols on top of that. so the underlying network just allows us to send a message from one node to one other node, but on top of that we can build broadcast as an abstraction that we then can use for higher level protocols.

https://colobu.com/2014/10/21/udp-and-unicast-multicast-broadcast-anycast/
单播(unicast): 是指封包在计算机网络的传输中，目的地址为单一目标的一种传输方式。它是现今网络应用最为广泛，通常所使用的网络协议或服务大多采用单播传输，例如一切基于TCP的协议。
组播(multicast): 也叫多播， 多点广播或群播。 指把信息同时传递给一组目的地址。它使用策略是最高效的，因为消息在每条网络链路上只需传递一次，而且只有在链路分叉的时候，消息才会被复制。
广播(broadcast):是指封包在计算机网络中传输时，目的地址为网络中所有设备的一种传输方式。实际上，这里所说的“所有设备”也是限定在一个范围之中，称为“广播域”。
任播(anycast):是一种网络寻址和路由的策略，使得资料可以根据路由拓朴来决定送到“最近”或“最好”的目的地。

在Linux运行ifconfig, 如果网卡信息中包含UP BROADCAST RUNNING MULTICAST，则支持广播和组播




Build upon system models from lecture 2:
1. Can be best-effort (may drop messages) or
2. reliable (non-faulty nodes deliver every message, by retransmitting dropped messages)

Asynchronous/ partially synchronous timing model => no upper bound on message latency
we're not going to assume any upper bound on message latency, we can say that the messages will eventually get through,

-----------------------
if you think back to the discussion of system models in lecture two, we have the distinction between fair loss links and reliable links, and of course most network links are fair loss but you can make them reliable by re-transmitting messages.
exact the same distinction happens in broadcast protocols, except here that a network that might lose message we call best effort broadcast typically.
best effort broadcast just means one node tries to send message to all the other nodes, but it may or may not arrive, especially if the sender crashes, for example, the message might not reach all of the other nodes. or we can make it reliable which again relies on re-transmitting lost messages.

like in the context of system models, we're going to assume not a synchronous system model but an asynchronous or partially asynchronous system model, which means that we're not going to assume any upper bound on message latency.
so in a reliable broadcast protocol we can say that the message will eventually get through, but we're not making any promises about how long it might take until the message might get through.

=================================
Receiving versus delivering
=================================
-------------------------------------------------------------

        Node A:                 Node B:
┌────────────────────┐     ┌────────────────────┐
│  Application       │     │  Application       │
└───────────┬────────┘     └───────▲────────────┘
            │                      │
 broadcast  │                      │  deliver
┌───────────▼────────┐     ┌───────┴────────────┐
│Broadcast algorithm │     │Broadcast algorithm │
│(middleware)        │     │(middleware)        │
└────────┬─▲─────────┘     └───────┬─▲──────────┘
         │ │                       │ │
    send │ │receive        send    │ │ receive
┌────────▼─┴───────────────────────▼─┴──────────┐
│                   Network                     │
└───────────────────────────────────────────────┘

-------------------------------------------------------------

Assume network provides point-to-point send/receive

After broadcast algorithm receives message from network, it may buffer /queue it before delivering to the application.



in the context of point-to-point network links, we have talked about sending and receiving messages over the network, whereas in the context of broadcast protocols, we talk about broadcasting a message and then delivering it as the counter part.
so what happens is the application on one node wants to broadcast a message to the entire group, we call this action to a broadcast, and then the underlying broadcast algorithm may send or receive multiple messages over the network, and these are point-to-point messages that are sent or received.
and on some other node, those messages might be received, they get again picked up by the broadcast algorithm. and broadcast algorithm at some point then delivers the message to the application. so here the delivery is the counterpart to the broadcast, one detail that happens here is that when the broadcast algorithm receives a message it might not immediately deliver that to the application, it may actually have to wait for a little bit before that message is ready to be delivered, because we want to ensure that the messages are delivered in a certain order.



the point here is that these are all forms of reliable broadcasts, so we're assuming we have a mechanism for re-transmission which ensures that all of the messages eventually get through, now we want to distinguish different types of broadcast based on the order in which messages get delivered.
====================================================
Forms of reliable broadcast
====================================================
1. FIFO/fai:fo/ broadcast:
If m1 and m2 are broadcast by the same node, and broadcast(m1) -> broadcast(m2), then m1 must be delivered before m2
all nodes will deliver those messages in the same order as they were broadcast. so for any messages broadcast from one particular node, they remain in order.
but for any message is broadcast by two different nodes, there's no guarantee about the order in which they might arrive.


todo: a node deliver a message to itself will become apparent when we talk about total order broadcast shortly

we have again three nodes A B and C, A wants to broadcast message m1 to the group, and so it sends the message over the network to B and to C.
and notice also that A sends the message to itself which here denoted by this little loop back arrow, now this might seem unnecessary, because why do you need to deliver a message back to yourself? because the sender of the message already knows what message is send, it doesn't need to receive it again. the reason why a node delivers a message to itself will become apparent when we talk about total order broadcast shortly. so for now just assume this as a little quirk that the guarantee of the broadcast protocol is also always delivers a message to itself.
then after m1 has been delivered, node B decides that it wants to broadcast message m2 to the group. and so it sends m2 of the network to A and C, and it also delivers m2 to itself.
and then finally node A wants to broadcast message m3, so again it sends that message over the network to B and C, and it delivers m3 to itself.
what we require FIFO broadcast as I said just now, is that because m1 and m3 are both broadcast by the same node A. we require that all nodes deliver m1 before they deliver m3, and we can check that this is the case here:
A delivers m1 here, and then delivers m3.
B delivers m1 then delivers m3.
C also delivers m1 and then delivers m3.

All of the nodes delivered these messages in the right order, now there are several possible orders that would be valid here under FIFO order broadcast. In particular, the message m2 that is sent by b, that can be ordered arbitrarily with respect to A's messages, because we are not making any guarantees about ordering across different nodes, and m2 was sent by B.
so this means that it's okay for m2 to be delivered before m1 and m3,
or in between the two
or after the two.
All of those are fine, and here for example, we can consider these two different executions in which the messages are delivered by c in a different order.

valid order:
(m2, m1, m3)
(m1, m2, m3)
(m1, m3, m2)
the message m2 you would say that happened after m1 in a causal sense, but still FIFO broadcast makes no guarantees about delivering m2 after m1.
(FIFO 只保持第一轮顺序)

If you do want that kind of ordering property(delivering m2 after m1) you need causal broadcast.
2. Causal broadcast:
If broadcast(m1) -> broadcast(m2) then m1 must be delivered before m2
Causal broadcast ensures that messages are delivered in causal order. That means that if the broadcasting of one message happened before the broadcasting of another, in the sense that happens before relation, then those messages must be delivered in that order that matches that happens before relationship.

m1 is broadcast by A, and it's received by B and C, and it's delivered by B here, and then after B has delivered m1, B wants to broadcast m2, and so here m2 may have a causal dependency on m1, and therefore we require that all of the nodes must deliver m1 first and m2 second.
next the node A might broadcast a message m3 again, it sends out of the network to the other two nodes and it delivers the message to itself. and in this case notice that the broadcast of m2 is concurrent with the broadcast of m3, because on A, m2 is delivered after m3 is broadcast, and on B m3 is delivered after m2 is broadcast. so these two messages do not depend on each other.
so in this case here, what we require is that any messages that have a causal dependency are delivered in causal order
and so in this case here,
we have a causal dependency between m1 and m2,
and we have a causal dependency between m1 and m3 because m1 and m3 were broadcast by the same node A,
but there's no causal dependency between m2 and m3
so this means m2 and m3 can be delivered in either order.

Causally related messages must be delivered in causal order.
Concurrent messages can be delivered in any order.

we have causal dependency:
1. broadcast(m1) -> broadcast(m2)
2. broadcast(m1) -> broadcast(m3)

and there's no causal dependency between m2 and m3, and so this means m2 and m3 can be delivered in either order.
`
valid order:
(m1, m2, m3)
(m1, m3, m2)

Causal: 只保持两条消息之间的顺序


notice here for example that A delivers first m1 then m3 then m2, whereas B delivers first m1 then m2 then m3, so both of these orders are valid causal orders, but they are not the same, and in some cases, we actually want to require that all of the nodes deliver messages int the same order.

and if that is what we want(require that all of the nodes deliver messages int the same order) we need to move to what is called total order broadcast, so total order broadcast puts all of the messages that are broadcast in the system into a total order. That means it's always clear which one came first, and it ensures that all of the nodes deliver messages in that same order. so there's agreement between all of the nodes on the order in which the messages
3. Total order broadcast:
We start with m1 broadcast by A, then we have m2 broadcast by B which happens after m1, and finally we have a message m3 that is broadcast by A again. Now in this case something somewhere has to decide on the order in which these will be delivered.
Let's say that the order that was decided is to deliver first m1, then m2, then m3.
and so we can see on C for example that's what happened, C first delivers m1, then it delivers m2, then it delivers m3, so C is delivering them in the correct order.
let's look at B here, B first delivers m1, then it delivers m2 to itself, then it delivers m3. so B also delivers the messages in the correct order.
let's look at a here, node A first delivers m1 to itself, then it broadcast m3; but wait, it's not allowed to deliver m3 to itself yet, because the order that was decided is that m2 must be delivered before m3. so therefore node A cannot immediately deliver m3 to itself instead it has to wait for m2 to arrive, and m2 to be delivered by A, and only then is A allowed to deliver m3 to itself.
----------------------------------------------------------------
so this is now where this delivery to self becomes very interesting and crucial, because you can see that sometimes there has to be this delay, if A node wants to deliver A message to itself.
now here, m1, m2 then m3 is possible order of delivering these messages. it could also be that we decide on a different order. so a different valid order might be for the delivery order to be (m1, m3, m2), and that is also fine as long as all of the nodes deliver the messages in that same order. and so here again we have start with C, so C first delivers m1 then m3 then m2, notice here that it's possible that C receives m2 over the network before it receives m3, in which case C will have to delay the delivery of m2 over the network before it receives m3, in which case C will have to delay the delivery of m2, until after m3 has arrived,
###
this is called a hold-back in the broadcast algorithm, it's often necessary for a message to be held back, if it's not yet ready to be delivered, because if we're waiting for some other message to arrive first.
###
for the delivery order to be one three two(1 3 2), we first delivery one, but we can't immediately deliver m2 to ourselves we have to first wait for m3 to be delivered, and then we're allowed to deliver m2 to ourselves at B.
And on node A, things are simpler now, so first we deliver m1 to ourselves then we deliver m3 to ourselves, and finally m2 arrives over the network and we deliver m2 to ourselves.
----------------------------------------------------------------
so both of these here are valid executions of total order broadcasts, the crucial thing is just that whatever the messages get delivered in that order has to be the same for all of the nodes.


If m1 is delivered before m2 on one node, then m1 must be delivered before m2 on all nodes

so total order broadcast puts all of the messages that are broadcast in the system into a total order, that means it's always clear which one came first, and it ensures that all of the nodes deliver messages in the same order. so there's agreement between all of the nodes on the order in which the messages should be delivered.
so in this example again, we start with m1 broadcast by A, then we have m2 broadcast by B which happens after m1, and finally we have a message m3 that is broadcast by A again. Now in this case, something somewhere has to decide on the order in which these will be delivered, let's say that the order

All nodes must deliver messages in the same order
valid:
(m1, m3, m2)
(m1, m2, m3)
This includes a node's deliveries to itself!


4. FIFO-total order broadcast:
Combination of FIFO broadcast and total order broadcast, all the nodes have to deliver messages in the same order, and also messages sent by the same node have to be delivered in the order they were sent


these are all forms of reliable broadcasts, so we're assuming we have a mechanism for re-transmission which ensure that all of the messages eventually get through.
now we want to distinguish different types of broadcast based on the order in which messages get delivered.

todo: prove these relationships between broadcast models

FIFO-total order broadcast is strictly stronger than causal broadcast, so every execution of FIFO total order broadcast also meets the requirement of causal order broadcast.
================================
relation ascii diagram
================================

                     +------------------+
                     | FIFO-total order |
                     | broadcast        |
                     +------------------+
        +----------------^          ^---------+
        |                                     |
        |                                     |
        |                                     |
+-------+----------+                +---------+--------+
|Causal broadcast  |                |Total order       |
|                  |                |broadcast         |
+--------+---------+                +---------+--------+
         ^                                    ^
         |                                    |
         |                                    |
+--------+---------+                          |
|FIFO broadcast    |                          |
|                  |                          |
+--------+---------+                          |
         ^                                    |
         |                                    |
         |                                    |
+--------+---------+                          |
|Reliable broadcast+--------------------------+
|                  |
+--------+---------+
         ^
         |
+--------+---------+
|Best-effort       |
|broadcast         |
+------------------+
