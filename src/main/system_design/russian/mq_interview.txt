=======================
1. 为什么需要mq
=======================
1. 异步
处理不属于主流程的任务, 提升接口响应速度, 提升系统总体性能
比如我下单以后要发送微信通知, 这种不影响主流程的, 可以异步处理
支付回调成功以后, 有商品超卖, 先正常扣减库存, 库存不够的再通过消息通知到支付那边退款

2. 服务解耦
A系统发送个数据到BCD三个系统，接口调用发送，那如果E系统也要这个数据呢？那如果C系统现在不需要了呢？现在A系统又要发送第二种数据了呢？
用户进入活动详情可能会触发一系列操作, 比如要统计各种数据一类的

3. 流量控制(削峰填谷)
把一些重的操作放到mq里面去,因为业务较重，处理时间较长。像一些例如秒杀活动爆发式流量打过来可能就顶不住了,比如下单成功以后支付回调,

====================================
2. 消息队列有什么缺点？
====================================
1. 系统可用性降低：
本来系统运行好好的，现在你非要加入个消息队列进去，那消息队列挂了，你的系统不是呵呵了。因此，系统可用性会降低；
2. 系统复杂度提高：
加入了消息队列，要多考虑很多方面的问题，比如: 一致性问题、如何保证消息不被重复消费、如何保证消息可靠性传输等。因此，需要考虑的东西更多，复杂性增大。
    2.1 一致性问题：
    A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。

====================
3. 技术选型:
====================
1. 场景比较普通, 不涉及一些流式计算的问题
2. 有个好爹:
 RocketMQ是阿里开源的
4. 经过了生产验证
经过阿里的生产环境的超高并发、高吞吐的考验，性能卓越，同时还支持分布式事务等特殊场景。
5. 在java技术栈内
 而且RocketMQ是基于Java语言开发的，适合深入阅读源码，有需要可以站在源码层面解决线上生产问题，包括源码的二次开发和改造。
6. 阿里全家桶, 方便, 便宜, 不需要搭建各种消息的监控管理后台

====================
4. rocketmq基础概念:
====================
1. msg_id
2. producer_group
3. queue
4. topic
5. consumer_group


====================================
4. 重复消费
====================================

====================================
5. 消息幂等
====================================
1. 消费消息的接口本来就是幂等的(比如add redis set)
2. 插表法
  rocket_mq 消息的id是幂等的, 插入mysql按时间清理,或者redis setExpire

====================================
6. 消息丢失
====================================
1. 生产者：生产者推送消息到 MQ 中，由于网络抖动等原因消息没有推送到 MQ 中，或者消息推送到 MQ 中了但是 MQ 内部出错了，导致消息丢失。
2. MQ：MQ 接收到消息后先把消息暂存在 OS Cache 中，消费者还没消费的时候 MQ 自己挂了，导致消息丢失。
3. 消费者：消费者消费到了这条消息，但是还没来得及处理，消费者自己挂了，但是消费者已经告诉了 MQ 自己已经消费完了，导致消息丢失。



======================
消息有序
======================
1. 发送者发送的消息在一个队列里面并且要有ack回执以后才会发送下一条消息
2. 消费者端只有一个线程在顺序消费消息(不能多消费者, 一个消费者也不能开线程池消费)


======================
消息堆积怎么办
======================
1. 如果是无序的消息
    consumer_group 里面加节点即可
2. 如果是有序的消息
    queue里面要求有序的消息一般也是部分有序, 只要是部分有序就有办法分片, 更新消费者代码, 让这个代码的topic再去更新其他的topic


消息模型: 发布订阅
1. 主动拉
2. 推送

4.RocketMQ是怎么保证系统高可用的？
多Master部署，防止单点故障；
主从结构，消息冗余，防止消息丢失；



RocketMQ 为什么性能高效，到底运用了什么“厉害”的技术
RocketMQ 如何实现刷盘（可以类比一下数据库方面的刷盘、redo、undo日志）
RocketMQ 文件存储设计理念、基于文件的 Hash 索引是怎么实现的
定时消息、消息过滤等实现原理
如何进行网络编程（Netty实战）