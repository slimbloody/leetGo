Redis全称：Remote Dictionary Server 远程字典服务
支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库



Redis 适合的场景
1. 缓存：减轻 MySQL 的查询压⼒，提升系统性能；
2. 排⾏榜: 利⽤ Redis 的 SortSet（有序集合）实现；
3. 计数器/限速器：利⽤ Redis 中原⼦性的⾃增操作，我们可以统计类似⽤户点赞数、⽤户访问数等。这类操作如果⽤ MySQL，频繁的读写会带来相当⼤的压⼒；限速器⽐较典型的使⽤场景是限制某个⽤户访问某个 API 的频率，常⽤的有抢购时，防⽌⽤户疯狂点击带来不必要的压⼒；
4. 好友关系：利⽤集合的⼀些命令，⽐如求交集、并集、差集等。可以⽅便解决⼀些共同好友、共同爱好之类的功能；
5. 消息队列：除了 Redis ⾃身的发布/订阅模式，我们也可以利⽤ List 来实现⼀个队列机制，⽐如：到货通知、邮件发送之类的需求，不需要⾼
可靠，但是会带来⾮常⼤的 DB 压⼒，完全可以⽤ List 来完成异步解耦；
6. Session 共享：Session 是保存在服务器的⽂件中，如果是集群服务，同⼀个⽤户过来可能落在不同机器上，这就会导致⽤户频繁登陆；采⽤
Redis 保存 Session 后，⽆论⽤户落在那台机器上都能够获取到对应的 Session 信息。
Redis 不适合的场景
数据量太⼤、数据访问频率⾮常低的业务都不适合使⽤ Redis，数据太⼤会增加成本，访问频率太低，保存在内存中纯属浪费资源。


Redis 有哪些常见的功能
1. 数据缓存功能
2. 分布式锁的功能
3. 消息队列: 阻塞队列

redis 为什么快
1. 完全基于内存，绝⼤部分请求是纯粹的内存操作，⾮常快速；
2. 数据结构简单，对数据操作也简单；
3. 采⽤单线程，避免了不必要的上下⽂切换和竞争条件，也不存在多进程或者多线程导致的切换⽽消耗CPU，不⽤去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁⽽导致的性能消耗；
4. 使⽤多路 I/O 复⽤模型，⾮阻塞 IO。






