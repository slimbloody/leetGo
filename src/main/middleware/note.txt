类的代理、反射调用是在什么场景用到的？
自定义注解是怎么和切面一起获取到信息使用的？
你需要的yml配置信息是如何被SpringBoot加载并初始化的？
Bean 是如何被注入到 Spring 容器，提供服务的？
ORM 框架是怎么解决不需要写接口的实现类就能执行CRUD操作的？
扰动函数和数据库路由实现中的数据散列有什么关系？
分布式任务调度与zookeeper配置中心是怎么联动的？
字节码插桩对方法增强怎么拦截程序方法运行时信息？


技术框架：包括 Spring、SpringBoot 配置加载、自定义注解、扫描注册Bean等，以及 ORM 框架设计原理和实现。这部分技术主要是把开发的中间件与框架结合，开发相应的组件或者包装为各类 SpringBoot Starter 的能力学习。
数据服务：Mysql、Redis、Elasticsearch，都是数据服务，通常需要开发各类组件对数据服务的使用进行封装，Mysql 我们知道有 JDBC，Redis 我们知道有 Jedis，但 Elasticsearch 有 x-pack 你是否了解。
数据组件：这类组件的开发就是为了简化对数据服务的使用，Mysql+JDBC+ORM，可以非常方便的使用数据库服务，那么 Elasticsearch  是否也可以做相应的组件研发，让它的查询也能像使用 MyBatis 一样呢？二折页的技术能力就需要对 MyBatis 等 ORM 框架的实现原理熟悉，同时需要了解 JDBC 的概念。
分布式技术：RPC 框架、注册中心、分布式任务，都是现有互联网分布式架构中非常重要的技术，而对于如何实现一个 RPC 框架，也技术是研发人员要掌握的重点，同时如何使用注册中心、怎么下发分布式调度任务，等等，这些技术的学习能让对现有的框架使用有更深入的认识。
服务治理：熔断、降级、限流、切量、黑白名单以及对现有方法的非入侵式扩展增强等，都可以成为是服务治理类组件，原本这类技术在早期是与业务逻辑代码融合的，后来逐步被拆解出来，开发成对应的组件。所以我们可以学习到，关于这类组件的包装、集成是如何做的。
字节码&插件：在互联网的系统应用运维过程中，你一定会接触到各类的监控系统，而很多监控系统是非入侵的全链路监控，那么这些是如何实现的呢？其实它们是基于字节码插桩，对系统方法的增强，采集相应的运行时信息，进行监控的。再到扩展 JVMTI、IDEA 插件开发，都是为了整个研发过程的可持续交付和上线提高交付质量和降低人效的。



讲一个 unpopular 的观点 - 做分布式系统最重要的是培养直觉，从 6.824 入手写 raft k/v 对培养直觉没有益处。

如果想在工业界做分布式系统，最好的学习路线是从 6.033 开始，搭配 DDIA，注重解决问题的直觉 - 比如数据组织方式的读写 tradeoff / 系统 IO 和 CPU 调优手段



谢邀， 不知道你说的中间件是哪种，中间件种类很多，需要技术路线也不同。
在从事算法工作前，我做了接近10年的中间件开发。中间件博大精深。方向甚多。
通讯中间件类的需要重点考虑TCP协议等协议，以及各种IO模型。 特别是AIO，CIO是重点。
对于带事务的交易中间件，消息队列这种。除了上面的意外，还要考虑事务处理的实现，特别是分布式事务的问题。
对于数据库中间件，要考虑如何抽象好各种数据库的接口，提供一致，高效，可靠的访问方法并对事务彻底的支持，特别是同时连接多种数据库的事务管理等。
应用程序中间件需要考虑内存和编程。大多数的应用程序中间件还要考虑对分布式系统的支持。 例如如何处理Session问题等等。